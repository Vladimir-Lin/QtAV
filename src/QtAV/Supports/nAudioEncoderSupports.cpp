#include <qtav.h>

N::AudioEncoderSupports:: AudioEncoderSupports (QWidget * parent,Plan * p)
                        : TreeWidget           (          parent,       p)
{
  Configure ( ) ;
}

N::AudioEncoderSupports::~AudioEncoderSupports (void)
{
}

QSize N::AudioEncoderSupports::sizeHint(void) const
{
  return SizeSuggestion ( QSize ( 640 , 480 ) ) ;
}

void N::AudioEncoderSupports::Configure(void)
{
  NewTreeWidgetItem            ( head                         ) ;
  setWindowTitle               ( tr("Audio encoder supports") ) ;
  setDragDropMode              ( NoDragDrop                   ) ;
  setSelectionMode             ( SingleSelection              ) ;
  setColumnCount               ( 6                            ) ;
  setRootIsDecorated           ( false                        ) ;
  setAlternatingRowColors      ( true                         ) ;
  setHorizontalScrollBarPolicy ( Qt::ScrollBarAsNeeded        ) ;
  setVerticalScrollBarPolicy   ( Qt::ScrollBarAsNeeded        ) ;
  head -> setText              ( 0,tr("Codec ID"   )          ) ;
  head -> setText              ( 1,tr("Name"       )          ) ;
  head -> setText              ( 2,tr("Rate"       )          ) ;
  head -> setText              ( 3,tr("Format"     )          ) ;
  head -> setText              ( 4,tr("Channels"   )          ) ;
  head -> setText              ( 5,""                         ) ;
  assignHeaderItems            ( head                         ) ;
  plan -> setFont              ( this                         ) ;
}

void N::AudioEncoderSupports::AddItem(QString name,int ID)
{
  AVCodec * Encoder = NULL                                           ;
  ////////////////////////////////////////////////////////////////////
  Encoder = ::avcodec_find_encoder ( (enum AVCodecID) ID    )        ;
  nDropOut            ( IsNull(Encoder)                     )        ;
  nDropOut            ( Encoder->type != AVMEDIA_TYPE_AUDIO )        ;
  int index = 0                                                      ;
  AVCodecContext * Context                                           ;
  while (Acoustics::SamplingRates[index]>0)                          {
    int rate = Acoustics::SamplingRates[index]                       ;
    for (int f=Acoustics::UInt8;f<=Acoustics::Float32;f++)           {
      int fmt= -1                                                    ;
      switch ( f )                                                   {
        case Acoustics::UInt8   : fmt = AV_SAMPLE_FMT_U8   ; break   ;
        case Acoustics::Int16   : fmt = AV_SAMPLE_FMT_S16  ; break   ;
        case Acoustics::Int32   : fmt = AV_SAMPLE_FMT_S32  ; break   ;
        case Acoustics::Float32 : fmt = AV_SAMPLE_FMT_FLT  ; break   ;
      }                                                              ;
      if (fmt>=0)                                                    {
        for (int c=1;c<=2;c++)                                       {
          bool correct = true                                        ;
          Context                = ::avcodec_alloc_context3(Encoder) ;
          Context -> sample_rate = rate                              ;
          Context -> channels    = c                                 ;
          Context -> sample_fmt  = (AVSampleFormat)fmt               ;
          ////////////////////////////////////////////////////////////
          if (::avcodec_open2(Context,Encoder,NULL)<0)               {
            correct = false                                          ;
          }                                                          ;
          if (correct && Context->frame_size<=0)                     {
            correct = false                                          ;
          }                                                          ;
          if (correct)                                               {
            ::avcodec_close ( Context )                              ;
            NewTreeWidgetItem   ( it                      )          ;
            it->setText         ( 0,name                  )          ;
            it->setText         ( 1,Encoder->name         )          ;
            it->setText         ( 2,QString::number(rate) )          ;
            switch (f)                                               {
              case Acoustics::UInt8                                  :
                it->setText     ( 3,tr("8 bits") )                   ;
              break                                                  ;
              case Acoustics::Int16                                  :
                it->setText     ( 3,tr("16 bits") )                  ;
              break                                                  ;
              case Acoustics::Int32                                  :
                it->setText     ( 3,tr("32 bits") )                  ;
              break                                                  ;
              case Acoustics::Float32                                :
                it->setText     ( 3,tr("float"  ) )                  ;
              break                                                  ;
            }                                                        ;
            it->setText         ( 4,QString::number(c) )             ;
            addTopLevelItem     ( it                          )      ;
          }                                                          ;
        }                                                            ;
      }                                                              ;
    }                                                                ;
    index++                                                          ;
  };
}

void N::AudioEncoderSupports::Detect(void)
{
  clear ( ) ;
  #define ADDX(ID) AddItem(#ID,ID)
  ADDX(AV_CODEC_ID_MPEG1VIDEO);
  ADDX(AV_CODEC_ID_MPEG2VIDEO);
  ADDX(AV_CODEC_ID_MPEG2VIDEO_XVMC);
  ADDX(AV_CODEC_ID_H261);
  ADDX(AV_CODEC_ID_H263);
  ADDX(AV_CODEC_ID_RV10);
  ADDX(AV_CODEC_ID_RV20);
  ADDX(AV_CODEC_ID_MJPEG);
  ADDX(AV_CODEC_ID_MJPEGB);
  ADDX(AV_CODEC_ID_LJPEG);
  ADDX(AV_CODEC_ID_SP5X);
  ADDX(AV_CODEC_ID_JPEGLS);
  ADDX(AV_CODEC_ID_MPEG4);
  ADDX(AV_CODEC_ID_RAWVIDEO);
  ADDX(AV_CODEC_ID_MSMPEG4V1);
  ADDX(AV_CODEC_ID_MSMPEG4V2);
  ADDX(AV_CODEC_ID_MSMPEG4V3);
  ADDX(AV_CODEC_ID_WMV1);
  ADDX(AV_CODEC_ID_WMV2);
  ADDX(AV_CODEC_ID_H263P);
  ADDX(AV_CODEC_ID_H263I);
  ADDX(AV_CODEC_ID_FLV1);
  ADDX(AV_CODEC_ID_SVQ1);
  ADDX(AV_CODEC_ID_SVQ3);
  ADDX(AV_CODEC_ID_DVVIDEO);
  ADDX(AV_CODEC_ID_HUFFYUV);
  ADDX(AV_CODEC_ID_CYUV);
  ADDX(AV_CODEC_ID_H264);
  ADDX(AV_CODEC_ID_INDEO3);
  ADDX(AV_CODEC_ID_VP3);
  ADDX(AV_CODEC_ID_THEORA);
  ADDX(AV_CODEC_ID_ASV1);
  ADDX(AV_CODEC_ID_ASV2);
  ADDX(AV_CODEC_ID_FFV1);
  ADDX(AV_CODEC_ID_4XM);
  ADDX(AV_CODEC_ID_VCR1);
  ADDX(AV_CODEC_ID_CLJR);
  ADDX(AV_CODEC_ID_MDEC);
  ADDX(AV_CODEC_ID_ROQ);
  ADDX(AV_CODEC_ID_INTERPLAY_VIDEO);
  ADDX(AV_CODEC_ID_XAN_WC3);
  ADDX(AV_CODEC_ID_XAN_WC4);
  ADDX(AV_CODEC_ID_RPZA);
  ADDX(AV_CODEC_ID_CINEPAK);
  ADDX(AV_CODEC_ID_WS_VQA);
  ADDX(AV_CODEC_ID_MSRLE);
  ADDX(AV_CODEC_ID_MSVIDEO1);
  ADDX(AV_CODEC_ID_IDCIN);
  ADDX(AV_CODEC_ID_8BPS);
  ADDX(AV_CODEC_ID_SMC);
  ADDX(AV_CODEC_ID_FLIC);
  ADDX(AV_CODEC_ID_TRUEMOTION1);
  ADDX(AV_CODEC_ID_VMDVIDEO);
  ADDX(AV_CODEC_ID_MSZH);
  ADDX(AV_CODEC_ID_ZLIB);
  ADDX(AV_CODEC_ID_QTRLE);
  ADDX(AV_CODEC_ID_TSCC);
  ADDX(AV_CODEC_ID_ULTI);
  ADDX(AV_CODEC_ID_QDRAW);
  ADDX(AV_CODEC_ID_VIXL);
  ADDX(AV_CODEC_ID_QPEG);
  ADDX(AV_CODEC_ID_PNG);
  ADDX(AV_CODEC_ID_PPM);
  ADDX(AV_CODEC_ID_PBM);
  ADDX(AV_CODEC_ID_PGM);
  ADDX(AV_CODEC_ID_PGMYUV);
  ADDX(AV_CODEC_ID_PAM);
  ADDX(AV_CODEC_ID_FFVHUFF);
  ADDX(AV_CODEC_ID_RV30);
  ADDX(AV_CODEC_ID_RV40);
  ADDX(AV_CODEC_ID_VC1);
  ADDX(AV_CODEC_ID_WMV3);
  ADDX(AV_CODEC_ID_LOCO);
  ADDX(AV_CODEC_ID_WNV1);
  ADDX(AV_CODEC_ID_AASC);
  ADDX(AV_CODEC_ID_INDEO2);
  ADDX(AV_CODEC_ID_FRAPS);
  ADDX(AV_CODEC_ID_TRUEMOTION2);
  ADDX(AV_CODEC_ID_BMP);
  ADDX(AV_CODEC_ID_CSCD);
  ADDX(AV_CODEC_ID_MMVIDEO);
  ADDX(AV_CODEC_ID_ZMBV);
  ADDX(AV_CODEC_ID_AVS);
  ADDX(AV_CODEC_ID_SMACKVIDEO);
  ADDX(AV_CODEC_ID_NUV);
  ADDX(AV_CODEC_ID_KMVC);
  ADDX(AV_CODEC_ID_FLASHSV);
  ADDX(AV_CODEC_ID_CAVS);
  ADDX(AV_CODEC_ID_JPEG2000);
  ADDX(AV_CODEC_ID_VMNC);
  ADDX(AV_CODEC_ID_VP5);
  ADDX(AV_CODEC_ID_VP6);
  ADDX(AV_CODEC_ID_VP6F);
  ADDX(AV_CODEC_ID_TARGA);
  ADDX(AV_CODEC_ID_DSICINVIDEO);
  ADDX(AV_CODEC_ID_TIERTEXSEQVIDEO);
  ADDX(AV_CODEC_ID_TIFF);
  ADDX(AV_CODEC_ID_GIF);
  ADDX(AV_CODEC_ID_DXA);
  ADDX(AV_CODEC_ID_DNXHD);
  ADDX(AV_CODEC_ID_THP);
  ADDX(AV_CODEC_ID_SGI);
  ADDX(AV_CODEC_ID_C93);
  ADDX(AV_CODEC_ID_BETHSOFTVID);
  ADDX(AV_CODEC_ID_PTX);
  ADDX(AV_CODEC_ID_TXD);
  ADDX(AV_CODEC_ID_VP6A);
  ADDX(AV_CODEC_ID_AMV);
  ADDX(AV_CODEC_ID_VB);
  ADDX(AV_CODEC_ID_PCX);
  ADDX(AV_CODEC_ID_SUNRAST);
  ADDX(AV_CODEC_ID_INDEO4);
  ADDX(AV_CODEC_ID_INDEO5);
  ADDX(AV_CODEC_ID_MIMIC);
  ADDX(AV_CODEC_ID_RL2);
  ADDX(AV_CODEC_ID_ESCAPE124);
  ADDX(AV_CODEC_ID_DIRAC);
  ADDX(AV_CODEC_ID_BFI);
  ADDX(AV_CODEC_ID_CMV);
  ADDX(AV_CODEC_ID_MOTIONPIXELS);
  ADDX(AV_CODEC_ID_TGV);
  ADDX(AV_CODEC_ID_TGQ);
  ADDX(AV_CODEC_ID_TQI);
  ADDX(AV_CODEC_ID_AURA);
  ADDX(AV_CODEC_ID_AURA2);
  ADDX(AV_CODEC_ID_V210X);
  ADDX(AV_CODEC_ID_TMV);
  ADDX(AV_CODEC_ID_V210);
  ADDX(AV_CODEC_ID_DPX);
  ADDX(AV_CODEC_ID_MAD);
  ADDX(AV_CODEC_ID_FRWU);
  ADDX(AV_CODEC_ID_FLASHSV2);
  ADDX(AV_CODEC_ID_CDGRAPHICS);
  ADDX(AV_CODEC_ID_R210);
  ADDX(AV_CODEC_ID_ANM);
  ADDX(AV_CODEC_ID_BINKVIDEO);
  ADDX(AV_CODEC_ID_IFF_ILBM);
  ADDX(AV_CODEC_ID_KGV1);
  ADDX(AV_CODEC_ID_YOP);
  ADDX(AV_CODEC_ID_VP8);
  ADDX(AV_CODEC_ID_PICTOR);
  ADDX(AV_CODEC_ID_ANSI);
  ADDX(AV_CODEC_ID_A64_MULTI);
  ADDX(AV_CODEC_ID_A64_MULTI5);
  ADDX(AV_CODEC_ID_R10K);
  ADDX(AV_CODEC_ID_MXPEG);
  ADDX(AV_CODEC_ID_LAGARITH);
  ADDX(AV_CODEC_ID_PRORES);
  ADDX(AV_CODEC_ID_JV);
  ADDX(AV_CODEC_ID_DFA);
  ADDX(AV_CODEC_ID_WMV3IMAGE);
  ADDX(AV_CODEC_ID_VC1IMAGE);
  ADDX(AV_CODEC_ID_UTVIDEO);
  ADDX(AV_CODEC_ID_BMV_VIDEO);
  ADDX(AV_CODEC_ID_VBLE);
  ADDX(AV_CODEC_ID_DXTORY);
  ADDX(AV_CODEC_ID_V410);
  ADDX(AV_CODEC_ID_XWD);
  ADDX(AV_CODEC_ID_CDXL);
  ADDX(AV_CODEC_ID_XBM);
  ADDX(AV_CODEC_ID_ZEROCODEC);
  ADDX(AV_CODEC_ID_MSS1);
  ADDX(AV_CODEC_ID_MSA1);
  ADDX(AV_CODEC_ID_TSCC2);
  ADDX(AV_CODEC_ID_MTS2);
  ADDX(AV_CODEC_ID_CLLC);
  ADDX(AV_CODEC_ID_MSS2);
  ADDX(AV_CODEC_ID_VP9);
  ADDX(AV_CODEC_ID_AIC);
  ADDX(AV_CODEC_ID_HNM4_VIDEO);
  ADDX(AV_CODEC_ID_BRENDER_PIX);
  ADDX(AV_CODEC_ID_Y41P);
  ADDX(AV_CODEC_ID_ESCAPE130);
  ADDX(AV_CODEC_ID_EXR);
  ADDX(AV_CODEC_ID_AVRP);
  ADDX(AV_CODEC_ID_012V);
  ADDX(AV_CODEC_ID_G2M);
  ADDX(AV_CODEC_ID_AVUI);
  ADDX(AV_CODEC_ID_AYUV);
  ADDX(AV_CODEC_ID_TARGA_Y216);
  ADDX(AV_CODEC_ID_V308);
  ADDX(AV_CODEC_ID_V408);
  ADDX(AV_CODEC_ID_YUV4);
  ADDX(AV_CODEC_ID_SANM);
  ADDX(AV_CODEC_ID_PAF_VIDEO);
  ADDX(AV_CODEC_ID_AVRN);
  ADDX(AV_CODEC_ID_CPIA);
  ADDX(AV_CODEC_ID_XFACE);
  ADDX(AV_CODEC_ID_SGIRLE);
  ADDX(AV_CODEC_ID_MVC1);
  ADDX(AV_CODEC_ID_MVC2);
  ADDX(AV_CODEC_ID_ALIAS_PIX);
  ADDX(AV_CODEC_ID_FIC);
  ADDX(AV_CODEC_ID_VP7);
  ADDX(AV_CODEC_ID_SNOW);
  ADDX(AV_CODEC_ID_WEBP);
  ADDX(AV_CODEC_ID_SMVJPEG);
  ADDX(AV_CODEC_ID_APNG);
  ADDX(AV_CODEC_ID_DAALA);
  ADDX(AV_CODEC_ID_CFHD);
  ADDX(AV_CODEC_ID_HEVC);
  ADDX(AV_CODEC_ID_HQX);
  ADDX(AV_CODEC_ID_TDSC);
  ADDX(AV_CODEC_ID_HQ_HQA);
  ADDX(AV_CODEC_ID_HAP);
  ADDX(AV_CODEC_ID_DDS);
  ADDX(AV_CODEC_ID_DXV);
  ADDX(AV_CODEC_ID_SCREENPRESSO);
  ADDX(AV_CODEC_ID_RSCC);
  ADDX(AV_CODEC_ID_PCM_S16LE);
  ADDX(AV_CODEC_ID_PCM_S16BE);
  ADDX(AV_CODEC_ID_PCM_U16LE);
  ADDX(AV_CODEC_ID_PCM_U16BE);
  ADDX(AV_CODEC_ID_PCM_S8);
  ADDX(AV_CODEC_ID_PCM_U8);
  ADDX(AV_CODEC_ID_PCM_MULAW);
  ADDX(AV_CODEC_ID_PCM_ALAW);
  ADDX(AV_CODEC_ID_PCM_S32LE);
  ADDX(AV_CODEC_ID_PCM_S32BE);
  ADDX(AV_CODEC_ID_PCM_U32LE);
  ADDX(AV_CODEC_ID_PCM_U32BE);
  ADDX(AV_CODEC_ID_PCM_S24LE);
  ADDX(AV_CODEC_ID_PCM_S24BE);
  ADDX(AV_CODEC_ID_PCM_U24LE);
  ADDX(AV_CODEC_ID_PCM_U24BE);
  ADDX(AV_CODEC_ID_PCM_S24DAUD);
  ADDX(AV_CODEC_ID_PCM_ZORK);
  ADDX(AV_CODEC_ID_PCM_S16LE_PLANAR);
  ADDX(AV_CODEC_ID_PCM_DVD);
  ADDX(AV_CODEC_ID_PCM_F32BE);
  ADDX(AV_CODEC_ID_PCM_F32LE);
  ADDX(AV_CODEC_ID_PCM_F64BE);
  ADDX(AV_CODEC_ID_PCM_F64LE);
  ADDX(AV_CODEC_ID_PCM_BLURAY);
  ADDX(AV_CODEC_ID_PCM_LXF);
  ADDX(AV_CODEC_ID_S302M);
  ADDX(AV_CODEC_ID_PCM_S8_PLANAR);
  ADDX(AV_CODEC_ID_PCM_S24LE_PLANAR);
  ADDX(AV_CODEC_ID_PCM_S32LE_PLANAR);
  ADDX(AV_CODEC_ID_PCM_S16BE_PLANAR);
  ADDX(AV_CODEC_ID_ADPCM_IMA_QT);
  ADDX(AV_CODEC_ID_ADPCM_IMA_WAV);
  ADDX(AV_CODEC_ID_ADPCM_IMA_DK3);
  ADDX(AV_CODEC_ID_ADPCM_IMA_DK4);
  ADDX(AV_CODEC_ID_ADPCM_IMA_WS);
  ADDX(AV_CODEC_ID_ADPCM_IMA_SMJPEG);
  ADDX(AV_CODEC_ID_ADPCM_MS);
  ADDX(AV_CODEC_ID_ADPCM_4XM);
  ADDX(AV_CODEC_ID_ADPCM_XA);
  ADDX(AV_CODEC_ID_ADPCM_ADX);
  ADDX(AV_CODEC_ID_ADPCM_EA);
  ADDX(AV_CODEC_ID_ADPCM_G726);
  ADDX(AV_CODEC_ID_ADPCM_CT);
  ADDX(AV_CODEC_ID_ADPCM_SWF);
  ADDX(AV_CODEC_ID_ADPCM_YAMAHA);
  ADDX(AV_CODEC_ID_ADPCM_SBPRO_4);
  ADDX(AV_CODEC_ID_ADPCM_SBPRO_3);
  ADDX(AV_CODEC_ID_ADPCM_SBPRO_2);
  ADDX(AV_CODEC_ID_ADPCM_THP);
  ADDX(AV_CODEC_ID_ADPCM_IMA_AMV);
  ADDX(AV_CODEC_ID_ADPCM_EA_R1);
  ADDX(AV_CODEC_ID_ADPCM_EA_R3);
  ADDX(AV_CODEC_ID_ADPCM_EA_R2);
  ADDX(AV_CODEC_ID_ADPCM_IMA_EA_SEAD);
  ADDX(AV_CODEC_ID_ADPCM_IMA_EA_EACS);
  ADDX(AV_CODEC_ID_ADPCM_EA_XAS);
  ADDX(AV_CODEC_ID_ADPCM_EA_MAXIS_XA);
  ADDX(AV_CODEC_ID_ADPCM_IMA_ISS);
  ADDX(AV_CODEC_ID_ADPCM_G722);
  ADDX(AV_CODEC_ID_ADPCM_IMA_APC);
  ADDX(AV_CODEC_ID_ADPCM_VIMA);
  ADDX(AV_CODEC_ID_ADPCM_AFC);
  ADDX(AV_CODEC_ID_ADPCM_IMA_OKI);
  ADDX(AV_CODEC_ID_ADPCM_DTK);
  ADDX(AV_CODEC_ID_ADPCM_IMA_RAD);
  ADDX(AV_CODEC_ID_ADPCM_G726LE);
  ADDX(AV_CODEC_ID_ADPCM_THP_LE);
  ADDX(AV_CODEC_ID_ADPCM_PSX);
  ADDX(AV_CODEC_ID_ADPCM_AICA);
  ADDX(AV_CODEC_ID_ADPCM_IMA_DAT4);
  ADDX(AV_CODEC_ID_AMR_NB);
  ADDX(AV_CODEC_ID_AMR_WB);
  ADDX(AV_CODEC_ID_RA_144);
  ADDX(AV_CODEC_ID_RA_288);
  ADDX(AV_CODEC_ID_ROQ_DPCM);
  ADDX(AV_CODEC_ID_INTERPLAY_DPCM);
  ADDX(AV_CODEC_ID_XAN_DPCM);
  ADDX(AV_CODEC_ID_SOL_DPCM);
  ADDX(AV_CODEC_ID_SDX2_DPCM);
  ADDX(AV_CODEC_ID_MP2);
  ADDX(AV_CODEC_ID_MP3);
  ADDX(AV_CODEC_ID_AAC);
  ADDX(AV_CODEC_ID_AC3);
  ADDX(AV_CODEC_ID_DTS);
  ADDX(AV_CODEC_ID_VORBIS);
  ADDX(AV_CODEC_ID_DVAUDIO);
  ADDX(AV_CODEC_ID_WMAV1);
  ADDX(AV_CODEC_ID_WMAV2);
  ADDX(AV_CODEC_ID_MACE3);
  ADDX(AV_CODEC_ID_MACE6);
  ADDX(AV_CODEC_ID_VMDAUDIO);
  ADDX(AV_CODEC_ID_FLAC);
  ADDX(AV_CODEC_ID_MP3ADU);
  ADDX(AV_CODEC_ID_MP3ON4);
  ADDX(AV_CODEC_ID_SHORTEN);
  ADDX(AV_CODEC_ID_ALAC);
  ADDX(AV_CODEC_ID_WESTWOOD_SND1);
  ADDX(AV_CODEC_ID_GSM);
  ADDX(AV_CODEC_ID_QDM2);
  ADDX(AV_CODEC_ID_COOK);
  ADDX(AV_CODEC_ID_TRUESPEECH);
  ADDX(AV_CODEC_ID_TTA);
  ADDX(AV_CODEC_ID_SMACKAUDIO);
  ADDX(AV_CODEC_ID_QCELP);
  ADDX(AV_CODEC_ID_WAVPACK);
  ADDX(AV_CODEC_ID_DSICINAUDIO);
  ADDX(AV_CODEC_ID_IMC);
  ADDX(AV_CODEC_ID_MUSEPACK7);
  ADDX(AV_CODEC_ID_MLP);
  ADDX(AV_CODEC_ID_GSM_MS);
  ADDX(AV_CODEC_ID_ATRAC3);
  ADDX(AV_CODEC_ID_VOXWARE);
  ADDX(AV_CODEC_ID_APE);
  ADDX(AV_CODEC_ID_NELLYMOSER);
  ADDX(AV_CODEC_ID_MUSEPACK8);
  ADDX(AV_CODEC_ID_SPEEX);
  ADDX(AV_CODEC_ID_WMAVOICE);
  ADDX(AV_CODEC_ID_WMAPRO);
  ADDX(AV_CODEC_ID_WMALOSSLESS);
  ADDX(AV_CODEC_ID_ATRAC3P);
  ADDX(AV_CODEC_ID_EAC3);
  ADDX(AV_CODEC_ID_SIPR);
  ADDX(AV_CODEC_ID_MP1);
  ADDX(AV_CODEC_ID_TWINVQ);
  ADDX(AV_CODEC_ID_TRUEHD);
  ADDX(AV_CODEC_ID_MP4ALS);
  ADDX(AV_CODEC_ID_ATRAC1);
  ADDX(AV_CODEC_ID_BINKAUDIO_RDFT);
  ADDX(AV_CODEC_ID_BINKAUDIO_DCT);
  ADDX(AV_CODEC_ID_AAC_LATM);
  ADDX(AV_CODEC_ID_QDMC);
  ADDX(AV_CODEC_ID_CELT);
  ADDX(AV_CODEC_ID_G723_1);
  ADDX(AV_CODEC_ID_G729);
  ADDX(AV_CODEC_ID_8SVX_EXP);
  ADDX(AV_CODEC_ID_8SVX_FIB);
  ADDX(AV_CODEC_ID_BMV_AUDIO);
  ADDX(AV_CODEC_ID_RALF);
  ADDX(AV_CODEC_ID_IAC);
  ADDX(AV_CODEC_ID_ILBC);
  ADDX(AV_CODEC_ID_METASOUND);
  ADDX(AV_CODEC_ID_FFWAVESYNTH);
  ADDX(AV_CODEC_ID_SONIC);
  ADDX(AV_CODEC_ID_SONIC_LS);
  ADDX(AV_CODEC_ID_PAF_AUDIO);
  ADDX(AV_CODEC_ID_OPUS);
  ADDX(AV_CODEC_ID_TAK);
  ADDX(AV_CODEC_ID_EVRC);
  ADDX(AV_CODEC_ID_SMV);
  ADDX(AV_CODEC_ID_COMFORT_NOISE);
  ADDX(AV_CODEC_ID_ON2AVC);
  ADDX(AV_CODEC_ID_DSS_SP);
  ADDX(AV_CODEC_ID_DSD_LSBF);
  ADDX(AV_CODEC_ID_DSD_MSBF);
  ADDX(AV_CODEC_ID_DSD_LSBF_PLANAR);
  ADDX(AV_CODEC_ID_DSD_MSBF_PLANAR);
  ADDX(AV_CODEC_ID_4GV);
  ADDX(AV_CODEC_ID_INTERPLAY_ACM);
  ADDX(AV_CODEC_ID_XMA1);
  ADDX(AV_CODEC_ID_XMA2);
  ADDX(AV_CODEC_ID_FIRST_SUBTITLE);
  ADDX(AV_CODEC_ID_DVD_SUBTITLE);
  ADDX(AV_CODEC_ID_DVB_SUBTITLE);
  ADDX(AV_CODEC_ID_TEXT);
  ADDX(AV_CODEC_ID_XSUB);
  ADDX(AV_CODEC_ID_SSA);
  ADDX(AV_CODEC_ID_MOV_TEXT);
  ADDX(AV_CODEC_ID_HDMV_PGS_SUBTITLE);
  ADDX(AV_CODEC_ID_DVB_TELETEXT);
  ADDX(AV_CODEC_ID_SRT);
  ADDX(AV_CODEC_ID_MICRODVD);
  ADDX(AV_CODEC_ID_EIA_608);
  ADDX(AV_CODEC_ID_JACOSUB);
  ADDX(AV_CODEC_ID_SAMI);
  ADDX(AV_CODEC_ID_STL);
  ADDX(AV_CODEC_ID_REALTEXT);
  ADDX(AV_CODEC_ID_SUBVIEWER1);
  ADDX(AV_CODEC_ID_SUBVIEWER);
  ADDX(AV_CODEC_ID_SUBRIP);
  ADDX(AV_CODEC_ID_WEBVTT);
  ADDX(AV_CODEC_ID_MPL2);
  ADDX(AV_CODEC_ID_VPLAYER);
  ADDX(AV_CODEC_ID_PJS);
  ADDX(AV_CODEC_ID_ASS);
  #undef  ADDX
  for (int i=0;i<columnCount();i++) {
    resizeColumnToContents    ( i ) ;
  }                                 ;
}
